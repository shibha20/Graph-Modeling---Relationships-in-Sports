WITH dedupedgamedetails AS(
	SELECT *, ROW_NUMBER() OVER(PARTITION BY game_id, player_id) AS row_number
	FROM game_details
), filtered AS(
	SELECT * FROM dedupedgamedetails
	WHERE row_number = 1
), aggregated AS
(SELECT f1.player_id as subject_player_id, 
f2.player_id as object_player_id,
CASE WHEN f1.team_abbreviation = f2.team_abbreviation 
		THEN 'shares_team'::edge_type
	ELSE 'plays_against'::edge_type
END as edge_type,
COUNT(1) AS num_games, 
SUM(f1.pts) AS subject_points, 
SUM(f2.pts) AS object_points,
MAX(f1.player_name) as subject_player_name, 
MAX(f2.player_name) as object_player_name 
FROM filtered f1
JOIN filtered f2
ON f1.player_name <> f2.player_name
AND f1.game_id = f2.game_id
WHERE f1.player_id > f2.player_id
GROUP BY 1,2,CASE WHEN f1.team_abbreviation = f2.team_abbreviation 
		THEN 'shares_team'::edge_type
	ELSE 'plays_against'::edge_type
END)



INSERT INTO edges
SELECT subject_player_id AS subject_identifier, 
'player'::vertex_type AS subject_type,
object_player_id AS object_identifier, 
'player'::vertex_type AS object_type,
edge_type AS edge_type,
json_build_object(
'num_games',num_games, 
'subject_points',subject_points, 
'object_points',object_points
)
FROM aggregated
ORDER BY 1,3



